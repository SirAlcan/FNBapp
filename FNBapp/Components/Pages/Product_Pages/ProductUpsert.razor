@page "/product/create/"
@page "/product/update/{id:int}"
@inject IProductRepository _ProductRepository
@inject ICategoryRepository _CategoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS

@if (IsProcessing)
{
    <div class="position-absolute top-50 start-50 translate-middle d-flex flex-column align-items-center bg-white p-4 rounded shadow">
        <p class="mb-3">Loading...</p>
        <BitEllipsisLoading />
    </div>
}
else
{
    <div class="container py-5">
        <div class="row mb-4">
            <div class="col-12 d-flex justify-content-between align-items-center">
                <h2 class="fw-bold text-primary mb-0">@(Id > 0 ? "Update" : "Create") Product</h2>
                <a href="/product" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-2"></i>Back to List
                </a>
            </div>
        </div>

        <div class="card shadow-sm border-0 rounded-3 overflow-hidden">
            <div class="card-header bg-light p-3">
                <h5 class="mb-0">Product Details</h5>
            </div>
            <div class="card-body p-4">
                <EditForm Model="@Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                    <DataAnnotationsValidator />

                    <div class="mb-4">
                        <div class="form-floating">
                            <InputText @bind-Value="Product.Name" class="form-control" id="Name" placeholder="Name" />
                            <label for="Name">Product Name</label>
                        </div>
                        <div class="text-danger mt-1">
                            <ValidationMessage For="() => Product.Name" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-end mt-4">
                        <button type="submit" class="btn btn-success" disabled="@IsProcessing">
                            <i class="bi bi-@(Id > 0 ? "save" : "plus-circle")"></i>
                            @(Id > 0 ? "Update" : "Create")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();
    private IEnumerable<Category> _categories = new List<Category>();


    private bool IsProcessing { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _ProductRepository.GetAsync(Id);
        }
        _categories = await _CategoryRepository.GetAllAsync();

    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        try
        {
            if (Product.Id == 0)
            {
                await _ProductRepository.CreateAsync(Product);
                await _JS.ToastrSuccess("Product Created Successfully");
            }
            else
            {
                await _ProductRepository.UpdateAsync(Product);
                await _JS.ToastrSuccess("Product Updated Successfully");
            }
            _navigationManager.NavigateTo("product");
        }
        catch (Exception ex)
        {
            await _JS.ToastrError("An error occurred: " + ex.Message);
            IsProcessing = false;
        }
    }
}